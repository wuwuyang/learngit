public class Solution {
    public void dfs(List<List<Integer>> res,List<Integer> temp,int[][] newnum,int index)
    {
        if(index==newnum.length)
        {
            res.add(new ArrayList<Integer>(temp));
            return;
        }
        dfs(res,temp,newnum,index+1);
        for(int i=0;i<newnum[index][1];i++)
        {
            temp.add(newnum[index][0]);
            dfs(res,temp,newnum,index+1);
        }
        for(int i=0;i<newnum[index][1];i++)
        {
            temp.remove(temp.size()-1);
        }
    }
    
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> res=new ArrayList();
        Map<Integer,Integer> map=new HashMap();
        int t=0;
        for(int n:nums)
        {
            if(!map.containsKey(n))
            map.put(n,t++);
        }
        int[][] newnum=new int[t][2];
        for(int n:nums)
        {
            int t1=map.get(n);
            newnum[t1][0]=n;
            newnum[t1][1]++;
        }
        dfs(res,new ArrayList<Integer>(),newnum,0);
        return res;
    }
}