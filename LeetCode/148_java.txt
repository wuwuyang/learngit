/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public ListNode getMiddle(ListNode head)
    {
        ListNode t1=head;
        ListNode t2=head;
        while(t2!=null&&t2.next!=null)
        {
            t1=t1.next;
            t2=t2.next.next;
        }
        return t1;
    }
    
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null)
        return head;
        ListNode mid=getMiddle(head);
        ListNode t=head;
        while(t.next!=mid)
        t=t.next;
        t.next=null;
        ListNode t1=sortList(head);
        ListNode t2=sortList(mid);
        ListNode thead=new ListNode(0);
        ListNode t3=thead;
        while(t1!=null&&t2!=null)
        {
            if(t1.val<t2.val)
            {
                t3.next=t1;
                t1=t1.next;
                t3=t3.next;
            }
            else
            {
                t3.next=t2;
                t2=t2.next;
                t3=t3.next;
            }
        }
        while(t1!=null)
        {
            t3.next=t1;
            t1=t1.next;
            t3=t3.next;
        }
        while(t2!=null)
        {
            t3.next=t2;
            t2=t2.next;
            t3=t3.next;
        }
        t3.next=null;
        return thead.next;
    }
    
    public int getPosValue(int val,long mask)
    {
        return (int)(val/mask)%10;
    }
    
    public ListNode helper(ListNode head)
    {
        ListNode[][] heads=new ListNode[2][10];
        ListNode[][] tails=new ListNode[2][10];
        long mask=1;
        ListNode t=head;
        int cur=0;
        int zeroNums=0;
        int size=0;
        while(t!=null)
        {
            int v=getPosValue(t.val,mask);
            if(heads[cur][v]==null)
            {
                heads[cur][v]=t;
                tails[cur][v]=t;
            }
            else
            {
                tails[cur][v].next=t;
                tails[cur][v]=t;
            }
            t=t.next;
            tails[cur][v].next=null;
            size++;
        }
        while(zeroNums<size)
        {
            //System.out.println(zeroNums+" "+size);
            zeroNums=0;
            int next=(cur+1)%2;
            mask*=10;
            for(int i=0;i<10;i++)
            {
                t=heads[cur][i];
                heads[cur][i]=null;
                tails[cur][i]=null;
                while(t!=null)
                {
                    //System.out.println(t.val);
                    int v=getPosValue(t.val,mask);
                    if(0==v)
                    {
                        zeroNums++;
                    }
                    // else
                    // {
                    //     System.out.println("== "+t.val+" "+v);
                    // }
                    if(heads[next][v]==null)
                    {
                        heads[next][v]=t;
                        tails[next][v]=t;
                    }
                    else
                    {
                        tails[next][v].next=t;
                        tails[next][v]=t;
                    }
                    t=t.next;
                    tails[next][v].next=null;
                }
            }
            cur=next;
        }
        return heads[cur][0];
    }
    
    public ListNode sortList2(ListNode head) {
        ListNode negHead=new ListNode(0);
        ListNode posHead=new ListNode(0);
        ListNode t1=head;
        ListNode t2=negHead;
        ListNode t3=posHead;
        int negSize=0;
        int posSize=0;
        while(t1!=null)
        {
            if(t1.val<0)
            {
                t1.val=-t1.val;
                t2.next=t1;
                t2=t2.next;
            }
            else
            {
                t3.next=t1;
                t3=t3.next;
            }
            t1=t1.next;
        }
        if(null!=t2)
        t2.next=null;
        if(null!=t3)
        t3.next=null;
        //System.out.println("****");
        t1=helper(negHead.next);
        //System.out.println("****");
        t2=helper(posHead.next);
        t3=null;
        while(t1!=null)
        {
            t1.val=-t1.val;
            ListNode t4=t1.next;
            t1.next=t3;
            t3=t1;
            t1=t4;
        }
        if(t3==null)
        return t2;
        ListNode tail=t3;
        while(tail.next!=null)
        tail=tail.next;
        tail.next=t2;
        return t3;
    }
}