/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int[] findRightInterval(Interval[] intervals) {
        TreeSet<Integer> ts=new TreeSet();
        Map<Integer,Integer> index=new HashMap();
        for(int i=0;i<intervals.length;i++)
        {
            ts.add(intervals[i].start);
            index.put(intervals[i].start,i);
        }
        int[] res=new int[intervals.length];
        for(int i=0;i<intervals.length;i++)
        {
            Interval t=intervals[i];
            Integer ti=ts.ceiling(t.end);
            if(null==ti)
            res[i]=-1;
            else
            res[i]=index.get(ti);
        }
        return res;
    }
}