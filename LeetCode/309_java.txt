public class Solution {
    public int max(int a,int b)
    {
        return a>b?a:b;
    }
    
    //O(n^3)
    // public int maxProfit(int[] prices) {
    //     int[][] dp=new int[prices.length+1][prices.length+1];
    //     int res=0;
    //     for(int i=1;i<prices.length;i++)
    //     {
    //         for(int j=0;j<prices.length-i;j++)
    //         {
    //             int t=prices[i+j]-prices[j];
    //             for(int k=j;k<j+i;k++)
    //             {
    //                 if(dp[j][k]+dp[k+2][j+i]>t)
    //                 {
    //                     t=dp[j][k]+dp[k+2][j+i];
    //                 }
    //             }
    //             dp[j][j+i]=t;
    //             if(t>res)
    //             res=t;
    //         }
    //     }
    //     return res;
    // }
    // 
    // O(n^2)
    
    // public int maxProfit(int[] prices){
    //     if(prices.length==0)
    //     return 0;
    //     int[][] dp=new int[prices.length+1][2];
    //     int res=0;
    //     for(int i=2;i<=prices.length;i++)
    //     {
    //         dp[i][0]=max(dp[i-1][0],dp[i-1][1]);
    //         int t=0;
    //         for(int j=1;j<i;j++)
    //         {
    //             int t1=prices[i-1]-prices[j-1]+dp[j-1][0];
    //             if(t1>t)
    //             t=t1;
    //         }
    //         dp[i][1]=t;
    //         if(t>res)
    //         res=t;
    //     }
    //     return res;
    // }
    
    //O(n)
    public int maxProfit(int[] prices) {
        int[] buys=new int[prices.length+1];
        int[] sells=new int[prices.length+1];
        if(prices.length==0)
        {
            return 0;
        }
        int res=0;
        buys[1]=-prices[0];
        for(int i=2;i<=prices.length;i++)
        {
            buys[i]=max(sells[i-2]-prices[i-1],buys[i-1]);
            sells[i]=max(sells[i-1],buys[i-1]+prices[i-1]);
            if(sells[i]>res)
            res=sells[i];
        }
        return res;
    }
}