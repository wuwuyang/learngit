public class Solution {
    public boolean dfs(int[] nums,boolean[] flag,int curSide,int index)
    {
        if(curSide==0)
        return true;
        if(index>=nums.length)
        return false;
        if(!flag[index]&&curSide>=nums[index])
        {
            flag[index]=true;
            if(dfs(nums,flag,curSide-nums[index],index+1))
            return true;
            flag[index]=false;
        }
        return dfs(nums,flag,curSide,index+1);
    }
    
    public boolean makesquare(int[] nums) {
        int max=0;
        int sum=0;
        for(int n:nums)
        {
            if(n>max)
            max=n;
            sum+=n;
        }
        if(nums.length<4||sum%4>0)
        return false;
        if(max>sum/4)
        return false;
        int side=sum/4;
        for(int i=0;i<nums.length;i++)
        {
            nums[i]=-nums[i];
        }
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++)
        {
            nums[i]=-nums[i];
        }
        boolean[] flag=new boolean[nums.length];
        for(int i=0;i<3;i++)
        if(!dfs(nums,flag,side,0))
        return false;
        return true;
    }
}