public class Solution {
    int[][] dir={{0,1},{0,-1},{1,0},{-1,0}};
    
    public void dfs(boolean[][] pac,int[][] matrix,int x,int y,int val)
    {
        if(x<0||x>=matrix.length||y<0||y>=matrix[0].length||pac[x][y])
        {
            return;
        }
        if(matrix[x][y]>=val)
        {
            //flag[x][y]=true;
            pac[x][y]=true;
            for(int i=0;i<4;i++)
            {
                dfs(pac,matrix,x+dir[i][0],y+dir[i][1],matrix[x][y]);
            }
        }
    }
    
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> res=new ArrayList();
        if(matrix.length==0||matrix[0].length==0)
        return res;
        //boolean[][] flag=new boolean[matrix.length][matrix[0].length];
        boolean[][] pac=new boolean[matrix.length][matrix[0].length];
        boolean[][] atl=new boolean[matrix.length][matrix[0].length];
        for(int i=0;i<matrix.length;i++)
        {
            dfs(pac,matrix,i,0,0);
            dfs(atl,matrix,i,matrix[0].length-1,0);
        }
        for(int i=0;i<matrix[0].length;i++)
        {
            dfs(pac,matrix,0,i,0);
            dfs(atl,matrix,matrix.length-1,i,0);
        }
        for(int i=0;i<matrix.length;i++)
        {
            for(int j=0;j<matrix[0].length;j++)
            {
                if(pac[i][j]&&atl[i][j])
                {
                    res.add(new int[]{i,j});
                }
            }
        }
        return res;
    }
}