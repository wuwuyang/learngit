class Solution {
public:
    int ladderLength(string beginWord, string endWord, unordered_set<string>& wordList) {
        unordered_map<string,set<string>> wm;
        unordered_map<string,int> m1,m2;
        queue<string> q1,q2;
        m1[beginWord]=1;
        m2[endWord]=0;
        q1.push(beginWord);
        q2.push(endWord);
        for(string s:wordList)
        {
            string ts=s;
            for(int i=0;i<s.length();i++)
            {
                ts[i]='_';
                wm[ts].insert(s);
                ts[i]=s[i];
            }
        }
        while(!q1.empty()||!q2.empty())
        {
            if(!q1.empty())
            {
                string ts=q1.front();
                q1.pop();
                if(m2.find(ts)!=m2.end())
                return m1[ts]+m2[ts];
                string ts2=ts;
                for(int i=0;i<ts.length();i++)
                {
                    ts2[i]='_';
                    if(wm.find(ts2)!=wm.end())
                    {
                        for(string s:wm[ts2])
                        {
                            if(m1.find(s)==m1.end())
                            {
                                m1[s]=m1[ts]+1;
                                q1.push(s);
                            }
                        }
                    }
                    ts2[i]=ts[i];
                }
            }
            if(!q2.empty())
            {
                string ts=q2.front();
                q2.pop();
                if(m1.find(ts)!=m1.end())
                return m1[ts]+m2[ts];
                string ts2=ts;
                for(int i=0;i<ts.length();i++)
                {
                    ts2[i]='_';
                    if(wm.find(ts2)!=wm.end())
                    {
                        for(string s:wm[ts2])
                        {
                            if(m2.find(s)==m2.end())
                            {
                                m2[s]=m2[ts]+1;
                                q2.push(s);
                            }
                        }
                    }
                    ts2[i]=ts[i];
                }
            }
        }
        return 0;
    }
};