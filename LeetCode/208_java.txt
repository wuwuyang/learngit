class TrieNode {
    public char value;
    public TrieNode child[]=new TrieNode[26];
    public boolean isWord=false;
    // Initialize your data structure here.
    public TrieNode() 
    {
        value='0';
        isWord=false;
    }
    public TrieNode(char c)
    {
        value=c;
        child=new TrieNode[26];
        isWord=false;
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    public void insert(String word) {
        TrieNode t=root;
        for(int i=0;i<word.length();i++)
        {
            char c=word.charAt(i);
            if(t.child[c-'a']==null)
            {
                t.child[c-'a']=new TrieNode(c);
            }
            t=t.child[c-'a'];
        }
        t.isWord=true;
    }

    // Returns if the word is in the trie.
    public boolean search(String word) {
        TrieNode t=root;
        for(int i=0;i<word.length();i++)
        {
            char c=word.charAt(i);
            if(t.child[c-'a']==null)
            return false;
            t=t.child[c-'a'];
        }
        return t.isWord;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public boolean startsWith(String prefix) {
        TrieNode t=root;
        for(int i=0;i<prefix.length();i++)
        {
            char c=prefix.charAt(i);
            if(t.child[c-'a']==null)
            return false;
            t=t.child[c-'a'];
        }
        return true;
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");