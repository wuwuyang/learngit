public class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
        List<int[]> res=new ArrayList();
        PriorityQueue<Integer> maxHeap=new PriorityQueue(100,new Comparator<Integer>(){
           @Override
           public int compare(Integer a,Integer b)
           {
               return b-a;
           }
        });
        List<int[]> b1=new ArrayList();
        for(int i=0;i<buildings.length;i++)
        {
            int[] b=buildings[i];
            b1.add(new int[]{b[0],b[2]});
            b1.add(new int[]{b[1],-b[2]});
        }
        Collections.sort(b1,new Comparator<int[]>(){
            @Override
            public int compare(int[] a,int[] b)
            {
                if(a[0]!=b[0])
                return a[0]-b[0];
                return b[1]-a[1];
            }
        });
        int cur=0,pre=0;
        for(int i=0;i<b1.size();i++)
        {
            int[] b=b1.get(i);
            if(b[1]>0)
            {
                maxHeap.add(b[1]);
                cur=maxHeap.peek();
            }
            else
            {
                maxHeap.remove(-b[1]);
                cur=maxHeap.size()==0?0:maxHeap.peek();
            }
            if(pre!=cur)
            {
                res.add(new int[]{b[0],cur});
                pre=cur;
            }
        }
        return res;
    }
}