public class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int[][] dp=new int[nums.length][2];
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++)
        dp[i][0]=0;
        int maxLen=0;
        int resid=0;
        for(int i=nums.length-1;i>=0;i--)
        {
            for(int j=i-1;j>=0;j--)
            {
                //System.out.println("nums["+i+"]:"+nums[i]+"nums["+j+"]:"+nums[j]+"dp["+i+"][0]:"+dp[i][0]+"dp["+j+"][0]:"+dp[j][0]);
                if(nums[i]%nums[j]==0&&dp[i][0]+1>dp[j][0])
                {
                    dp[j][0]=dp[i][0]+1;
                    dp[j][1]=i;
                    if(dp[j][0]>maxLen)
                    {
                        maxLen=dp[j][0];
                        resid=j;
                    }
                }
            }
        }
        // for(int i=0;i<nums.length;i++)
        // {
        //     System.out.print(" ["+dp[i][0]+","+dp[i][1]+"] ");
        // }
        // System.out.println();
        List<Integer> res=new ArrayList();
        boolean end=false;
        while(resid<nums.length)
        {
            res.add(nums[resid]);
            if(dp[resid][0]==0)
            break;
            resid=dp[resid][1];
        }
        return res;
    }
}