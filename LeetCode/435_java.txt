/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
 
 class IntervalComparator implements Comparator{
     @Override
     public int compare(Object obj1,Object obj2)
     {
         Interval i1=(Interval) obj1;
         Interval i2=(Interval) obj2;
         if(i2.end<i1.end)
         return 1;
         else if(i2.end>i1.end)
         return -1;
         return i2.start-i1.start;
     }
 }
 
public class Solution {
    public int eraseOverlapIntervals(Interval[] intervals) {
        List<Interval> list=new ArrayList();
        for(Interval i:intervals)
        list.add(i);
        Collections.sort(list,new IntervalComparator());
        if(list.size()==0)
        return 0;
        int res=0;
        //int tstart=list.get(0).start;
        int tend=list.get(0).end;
        for(int i=1;i<list.size();i++)
        {
            Interval t=list.get(i);
            if(t.end==tend)
            res++;
            else if(t.start<tend)
            res++;
            else
            {
                tend=t.end;
            }
        }
        return res;
    }
}