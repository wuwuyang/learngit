public class Solution {
    class Node{
        public int x;
        public int y;
        public int value;
        public Node(int tx,int ty,int v)
        {
            x=tx;
            y=ty;
            value=v;
        }
    }
    
    public int kthSmallest(int[][] matrix, int k) {
        boolean[][] flag=new boolean[matrix.length][matrix[0].length];
        Comparator<Node> orderValue=new Comparator<Node>(){
            public int compare(Node n1,Node n2)
            {
                if(n1.value>n2.value)
                return 1;
                else if(n1.value==n2.value)
                return 0;
                else
                return -1;
            }
        };
        PriorityQueue<Node> p=new PriorityQueue<Node>(k,orderValue);
        flag[0][0]=true;
        p.add(new Node(0,0,matrix[0][0]));
        for(int i=0;i<k-1;i++)
        {
            Node t=p.poll();
            if(t.x<matrix.length-1&&!flag[t.x+1][t.y])
            {
                flag[t.x+1][t.y]=true;
                p.add(new Node(t.x+1,t.y,matrix[t.x+1][t.y]));
            }
            if(t.y<matrix[0].length-1&&!flag[t.x][t.y+1])
            {
                flag[t.x][t.y+1]=true;
                p.add(new Node(t.x,t.y+1,matrix[t.x][t.y+1]));
            }
        }
        return p.poll().value;
    }
}