public class Solution {
    public int longestSubstring(String s, int k) {
        if(s.length()<k)
        return 0;
        Map<Character,Integer> map=new HashMap();
        for(int i=0;i<s.length();i++)
        {
            Character c=s.charAt(i);
            Integer t=map.get(c);
            if(t==null)
            t=0;
            t++;
            map.put(c,t);
        }
        Set<Character> set=new HashSet();
        for(Map.Entry<Character,Integer> entry:map.entrySet())
        {
            if(entry.getValue()<k)
            {
                set.add(entry.getKey());
            }
        }
        if(set.isEmpty())
        return s.length();
        int res=0;
        int start=0;
        for(int i=0;i<=s.length();i++)
        {
            if(i==s.length())
            {
                String ts=s.substring(start);
                int tres=longestSubstring(ts,k);
                res=res>tres?res:tres;
                start=i+1;
            }
            else
            {
                char c=s.charAt(i);
                if(set.contains(c))
                {
                    String ts=s.substring(start,i);
                    int tres=longestSubstring(ts,k);
                    res=res>tres?res:tres;
                    start=i+1;
                }
            }
        }
        return res;
    }
}