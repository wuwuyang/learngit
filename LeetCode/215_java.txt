public class Solution {
    public int findKthLargest(int[] nums,int k)
    {
        return findKthLargest2(nums,nums.length-k+1,0,nums.length-1);
    }
    
    public int findKthLargest2(int[] nums, int k, int left, int right) {
        if(left==-1||right==-1)
        {
            left=0;
            right=nums.length-1;
        }
        if(left==right)
        return nums[left];
        int mid=(left+right)/2;
        int temp=nums[mid];
        nums[mid]=nums[left];
        nums[left]=temp;
        int i=left,j=right;
        while(i<=j)
        {
            while(i<=j&&nums[j]>=temp)
            {
                j--;
            }
            if(i<j)
            {
                int t1=nums[i];
                nums[i]=nums[j];
                nums[j]=t1;
            }
            while(i<=j&&nums[i]<temp)
            {
                i++;
            }
            if(i<j)
            {
                int t1=nums[i];
                nums[i]=nums[j];
                nums[j]=t1;
            }
        }
        nums[i]=temp;
        int t2=i-left+1;
        if(t2==k)
        return temp;
        if(t2<k)
        return findKthLargest2(nums,k-t2,i+1,right);
        if(t2>k)
        return findKthLargest2(nums,k,left,i-1);
        return 0;
    }
}