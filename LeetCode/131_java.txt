public class Solution {
    public void dfs(List<List<String>> res,List<String> cur,boolean[][] flag,int index,String s)
    {
       // System.out.println(index);
        if(index>=flag.length)
        {
           // System.out.println("fuck");
            res.add(new ArrayList(cur));
            return;
        }
        for(int i=index;i<flag.length;i++)
        {
           if(flag[index][i])
           {
               cur.add(s.substring(index,i+1));
               dfs(res,cur,flag,i+1,s);
               cur.remove(cur.size()-1);
           }
        }
    }
    
    public List<List<String>> partition(String s) {
        boolean[][] flag=new boolean[s.length()][s.length()];
        for(int i=0;i<s.length();i++)
        flag[i][i]=true;
        for(int i=1;i<s.length();i++)
        {
            for(int j=0;j<s.length()-i;j++)
            {
                if(s.charAt(j)==s.charAt(j+i))
                {
                    if(i>1&&!flag[j+1][j+i-1])
                    continue;
                    flag[j][j+i]=true;
                    //System.out.println(j+" "+(j+i));
                }
            }
        }
        List<List<String>> res=new ArrayList();
        List<String> cur=new ArrayList<String>();
        dfs(res,cur,flag,0,s);
        return res;
    }
}