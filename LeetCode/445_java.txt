/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        LinkedList<ListNode> q1=new LinkedList();
        LinkedList<ListNode> q2=new LinkedList();
        LinkedList<ListNode> q3=new LinkedList();
        ListNode h1=l1,h2=l2;
        while(h1!=null)
        {
            q1.add(h1);
            h1=h1.next;
        }
        while(h2!=null)
        {
            q2.add(h2);
            h2=h2.next;
        }
        int up=0;
        while(!q1.isEmpty()&&!q2.isEmpty())
        {
            ListNode t1=q1.pollLast();
            ListNode t2=q2.pollLast();
            int t=t1.val+t2.val+up;
            //System.out.println(t);
            if(t<10)
            {
                q3.addFirst(new ListNode(t));
                up=0;
            }
            else
            {
                q3.addFirst(new ListNode(t-10));
                up=1;
            }
        }
        while(!q1.isEmpty())
        {
            ListNode t1=q1.pollLast();
            int t=t1.val+up;
            if(t<10)
            {
                q3.addFirst(new ListNode(t));
                up=0;
            }
            else
            {
                q3.addFirst(new ListNode(t-10));
                up=1;
            }
        }
        while(!q2.isEmpty())
        {
            ListNode t1=q2.pollLast();
            int t=t1.val+up;
            if(t<10)
            {
                q3.addFirst(new ListNode(t));
                up=0;
            }
            else
            {
                q3.addFirst(new ListNode(t-10));
                up=1;
            }
        }
        ListNode head=new ListNode(up);
        ListNode thead=head;
        while(!q3.isEmpty())
        {
            thead.next=q3.poll();
            thead=thead.next;
        }
        if(up==0)
        head=head.next;
        return head;
    }
}