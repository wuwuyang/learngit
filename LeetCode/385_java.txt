/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    
    public NestedInteger deserialize(String s) {
        NestedInteger root=new NestedInteger();
        Stack<NestedInteger> stk=new Stack();
        stk.push(root);
        int num=0;
        boolean flag=false;
        boolean isNeg=false;
        for(int i=0;i<s.length();i++)
        {
            char c=s.charAt(i);
            if(c>='0'&&c<='9')
            {
                num=num*10+c-'0';
                flag=true;
            }
            else if(c=='-')
            {
                isNeg=true;
            }
            else
            {
                if(flag)
                {
                    if(isNeg)
                    num=-num;
                    NestedInteger tn=new NestedInteger(num);
                    NestedInteger stktop=stk.pop();
                    stktop.add(tn);
                    stk.push(stktop);
                    flag=false;
                    num=0;
                    isNeg=false;
                }
                if(c=='[')
                {
                    NestedInteger tn=new NestedInteger();
                    stk.push(tn);
                }
                else if(c==']')
                {
                    NestedInteger stktop1=stk.pop();
                    NestedInteger stktop2=stk.pop();
                    stktop2.add(stktop1);
                    stk.push(stktop2);
                }
            }
        }
        if(flag)
        {
            if(isNeg)
            num=-num;
            return new NestedInteger(num);
        }
        else
        {
            return stk.pop().getList().get(0);
        }
    }
}