class TrieNode(object):
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.isEnd=False
        self.sub=[None for i in range(26)]

class Trie(object):

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        t=self.root
        for x in word:
            t1=ord(x)-ord('a')
            if t.sub[t1]==None:
                t.sub[t1]=TrieNode()
            t=t.sub[t1]
        t.isEnd=True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        t=self.root
        for x in word:
            t1=ord(x)-ord('a')
            if t.sub[t1]==None:
                return False
            t=t.sub[t1]
        return t.isEnd

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie
        that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        t=self.root
        for x in prefix:
            t1=ord(x)-ord('a')
            if t.sub[t1]==None:
                return False
            t=t.sub[t1]
        return True

# Your Trie object will be instantiated and called as such:
# trie = Trie()
# trie.insert("somestring")
# trie.search("key")