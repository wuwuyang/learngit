public class Solution {
    //违规使用Set
    // public int findDuplicate(int[] nums) {
    //     Set<Integer> set=new HashSet();
    //     for(int i:nums)
    //     {
    //         if(set.contains(i))
    //         {
    //             return i;
    //         }
    //         else
    //         {
    //             set.add(i);
    //         }
    //     }
    //     return -1;
    // }
    
    //看做一个链表，时间O(n)，空间O(1)
    // public int findDuplicate(int[] nums) {
    //     //int start=nums[0];
    //     int fast=nums[nums[0]];
    //     int slow=nums[0];
    //     while(fast!=slow)
    //     {
    //         fast=nums[nums[fast]];
    //         slow=nums[slow];
    //     }
    //     int res=0;
    //     while(res!=slow)
    //     {
    //         res=nums[res];
    //         slow=nums[slow];
    //     }
    //     return res;
    // }
    
    //二分法，O(nlogn)
    public int findDuplicate(int[] nums) {
        int left=0,right=nums.length;
        while(left<right)
        {
            int mid=(left+right)/2;
            int num1=0;
            int num2=0;
            for(int i=0;i<nums.length;i++)
            {
                if(nums[i]<=mid)
                {
                    num1++;
                }
                if(nums[i]==mid)
                {
                    num2++;
                }
            }
            if(num2>1)
            return mid;
            if(num1<=mid)
            {
                left=mid+1;
            }
            else
            {
                right=mid-1;
            }
        }
        return left;
    }
}