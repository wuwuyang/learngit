
class Solution(object):
    def quickSort(self,b,left,right):
        if left>=right:
            return
        mid=(left+right)/2
        b[left],b[mid]=b[mid],b[left]
        stand=b[left][1]
        tt=b[left]
        temp=left
        i,j=left,right
        while i<j:
            while temp<j and b[j][1]<stand:
                j-=1
            if temp<j:
                b[temp]=b[j]
                temp=j
                j-=1
            while i<temp and b[i][1]>=stand:
                i+=1
            if i<temp:
                b[temp]=b[i]
                temp=i
                i+=1
        b[temp]=tt;
        # print b[:temp],b[temp],b[temp+1:]
        self.quickSort(b,left,temp-1)
        self.quickSort(b,temp+1,right)
        
    
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        a=collections.defaultdict(int)
        b=[]
        for i in nums:
            a[i]+=1
        for x in a:
            b.append([x,a[x]])
        self.quickSort(b,0,len(b)-1)
        res=[]
        # print b
        for i in range(k):
            res.append(b[i][0])
        return res
        