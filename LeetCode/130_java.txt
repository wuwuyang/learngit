public class Solution {
    int[][] dir={{1,0},{-1,0},{0,1},{0,-1}};
    
    public void dfs(char[][] board,int x,int y)
    {
        if(x<0||x>=board.length||y<0||y>=board[0].length||board[x][y]=='X'||board[x][y]=='1')
        return;
        board[x][y]='1';
        for(int i=0;i<4;i++)
        {
            dfs(board,x+dir[i][0],y+dir[i][1]);
        }
    }
    
    public static class Pair
    {
        int x;
        int y;
        public Pair(int a,int b)
        {
            x=a;
            y=b;
        }
    }
    
    public void solve(char[][] board) {
        if(board.length==0||board[0].length==0)
        return;
        int[] t1={0,board.length-1};
        int[] t2={0,board[0].length-1};
        LinkedList<Pair> q=new LinkedList();
        for(int i:t1)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(board[i][j]=='O')
                {
                    //dfs(board,i,j);
                    q.add(new Pair(i,j));
                }
            }
        }
        for(int i:t2)
        {
            for(int j=0;j<board.length;j++)
            {
                if(board[j][i]=='O')
                {
                    //dfs(board,j,i);
                    q.add(new Pair(j,i));
                }
            }
        }
        while(!q.isEmpty())
        {
            Pair p=q.poll();
            if(p.x<0||p.x>=board.length||p.y<0||p.y>=board[0].length||board[p.x][p.y]!='O')
            continue;
            board[p.x][p.y]='1';
            for(int i=0;i<4;i++)
            {
                q.add(new Pair(p.x+dir[i][0],p.y+dir[i][1]));
            }
        }
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(board[i][j]=='O')
                board[i][j]='X';
            }
        }
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(board[i][j]=='1')
                board[i][j]='O';
            }
        }
    }
}