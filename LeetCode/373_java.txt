public class Solution {
    class Pair{
        public int sum;
        public int a;
        public int b;
        public int dir;
        public Pair(int a,int b,int sum,int dir)
        {
            this.a=a;
            this.b=b;
            this.sum=sum;
            this.dir=dir;
        }
    }
    
    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<int[]> res=new ArrayList<int[]>();
        Comparator<Pair> cmp=new Comparator<Pair>(){
            public int compare(Pair p1,Pair p2)
            {
                int sum1=p1.sum;
                int sum2=p2.sum;
                if(sum1>sum2)
                return 1;
                else if(sum1==sum2)
                return 0;
                else
                return -1;
            }
        };
        Queue<Pair> q=new PriorityQueue<Pair>(k,cmp);
        for(int i=0;i<nums1.length&&i<nums2.length;i++)
        {
            q.add(new Pair(i,i,nums1[i]+nums2[i],0));
        }
        int l=0;
        while(l<k)
        {
            Pair tp=q.poll();
            if(tp==null)
            break;
            int[] t={nums1[tp.a],nums2[tp.b]};
            res.add(t);
            if(tp.a<nums1.length-1&&tp.dir>=0)
            {
                q.add(new Pair(tp.a+1,tp.b,nums1[tp.a+1]+nums2[tp.b],1));
            }
            if(tp.b<nums2.length-1&&tp.dir<=0)
            {
                q.add(new Pair(tp.a,tp.b+1,nums1[tp.a]+nums2[tp.b+1],-1));
            }
            l++;
        }
        return res;
    }
}